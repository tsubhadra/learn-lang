# Groovy Initial Setup Guide

## What is Groovy?

Groovy is a powerful, optionally typed, and dynamic language for the Java Virtual Machine (JVM). It integrates smoothly with any Java program and delivers powerful features including scripting capabilities, Domain-Specific Language authoring, runtime and compile-time meta-programming, and functional programming.

## Extensions in VSCode

1. **Code Groovy** - Essential
   - Syntax highlighting and code formatting
   - Extension ID: marlon407.code-groovy

2. **Language Support for Java** - Required
   - Provides Java support needed for Groovy
   - Extension ID: redhat.java

3. **Gradle for Java** - Recommended for Groovy projects
   - Build tool integration
   - Extension ID: vscjava.vscode-gradle

4. **Groovy Lint, Format and Fix**
   - Linting and formatting for Groovy
   - Extension ID: NicolasVuillamy.vscode-groovy-lint

5. **Extension Pack for Java** (Optional but helpful)
   - Includes Java debugger and test runner
   - Extension ID: vscjava.vscode-java-pack

## Installation

### Prerequisites
Groovy runs on the JVM, so you need Java installed first:
```bash
# Check Java version (need Java 8 or higher)
java -version

# If not installed, install Java (example for macOS)
brew install openjdk@17
```

### Install Groovy

#### Recommended Method: Using SDKMAN (macOS/Linux)

SDKMAN is the recommended way to install Groovy as it handles Java dependencies automatically.

**Step 1: Install SDKMAN**
```bash
# Download and install SDKMAN
curl -s "https://get.sdkman.io" | bash

# Source SDKMAN in current shell
source "$HOME/.sdkman/bin/sdkman-init.sh"

# Verify SDKMAN installation
sdk version
```

**Step 2: Install Java (Required for Groovy)**
```bash
# Install Java using SDKMAN (Groovy requires Java)
sdk install java 17.0.9-tem

# Verify Java installation
java -version
```

**Step 3: Install Groovy**
```bash
# Install latest Groovy
sdk install groovy

# Verify Groovy installation
groovy -version
```

**Step 4: Add to Shell Profile (Optional but Recommended)**

Add this line to your `~/.zshrc` or `~/.bash_profile`:
```bash
# Add to ~/.zshrc (for zsh) or ~/.bashrc (for bash)
source "$HOME/.sdkman/bin/sdkman-init.sh"
```

Then reload your shell:
```bash
source ~/.zshrc   # For zsh
# or
source ~/.bashrc  # For bash
```

**Complete Installation in One Session:**
```bash
# Install SDKMAN
curl -s "https://get.sdkman.io" | bash
source "$HOME/.sdkman/bin/sdkman-init.sh"

# Install Java and Groovy
sdk install java 17.0.9-tem
sdk install groovy

# Verify installations
java -version
groovy -version
```

Expected output for Groovy:
```
Groovy Version: 5.0.2 JVM: 17.0.9 Vendor: Eclipse Adoptium OS: Mac OS X
```

#### Alternative: macOS (using Homebrew)
```bash
# Install Java first (required)
brew install openjdk@17

# Install Groovy
brew install groovy

# Verify installation
groovy -version
```

**Note:** Homebrew installation may sometimes fail with dependency issues. SDKMAN is more reliable.

#### Alternative: Linux (Direct SDKMAN Installation)
```bash
# Install SDKMAN
curl -s "https://get.sdkman.io" | bash
source "$HOME/.sdkman/bin/sdkman-init.sh"

# Install Java and Groovy
sdk install java
sdk install groovy

# Verify installation
groovy -version
```

#### Windows (using Chocolatey)
```powershell
# Install Groovy
choco install groovy

# Verify installation
groovy -version
```

#### Manual Installation
1. Download from https://groovy.apache.org/download.html
2. Extract the archive
3. Add `GROOVY_HOME` environment variable
4. Add `$GROOVY_HOME/bin` to PATH

### Alternative: Using Gradle (no separate Groovy install needed)
```bash
# Install Gradle
brew install gradle  # macOS
sdk install gradle   # Linux with SDKMAN

# Gradle includes Groovy runtime
```

## How to Run Groovy Programs

### Method 1: Run Groovy Script Directly
```bash
# Run a Groovy script
groovy filename.groovy

# Example:
groovy hello-world.groovy
```

### Method 2: Using Groovy Console (Interactive)
```bash
# Open Groovy Console (GUI)
groovyConsole

# Or use Groovy Shell (CLI)
groovysh
```

### Method 3: Compile to Class File
```bash
# Compile Groovy to Java bytecode
groovyc MyClass.groovy

# Run the compiled class
java -cp .:$GROOVY_HOME/embeddable/groovy-all-*.jar MyClass

# Or simply use groovy
groovy MyClass
```

### Method 4: Using Gradle
```bash
# Create a Gradle project
gradle init --type groovy-application

# Run the application
gradle run

# Run tests
gradle test
```

### Method 5: Run from VSCode
- Install Code Runner extension
- Right-click in editor → "Run Code"
- Or press `Ctrl+Alt+N` (Windows/Linux) or `Cmd+Option+N` (macOS)

### Common Groovy Commands
```bash
# Run script
groovy script.groovy

# Compile to class
groovyc MyClass.groovy

# Interactive shell
groovysh

# GUI console
groovyConsole

# Display version
groovy -version

# Run with classpath
groovy -cp lib/* script.groovy

# Enable debugging
groovy -d script.groovy

# Run with SDKMAN (if not in PATH)
bash -c 'source ~/.sdkman/bin/sdkman-init.sh && groovy script.groovy'
```

## Practical Hello World Example

### Creating Your First Groovy Program

Based on actual installation and execution experience:

**Step 1: Create the Groovy script**
```bash
cat > 01-hello-world.groovy << 'EOF'
// 01-hello-world.groovy
// A simple Groovy program to print "Hello world!"

// Simple print statement - Groovy style
println "Hello world!"
EOF
```

**Step 2: Run the script directly (no compilation needed)**
```bash
# If SDKMAN is in your PATH
groovy 01-hello-world.groovy

# Or with SDKMAN sourcing
bash -c 'source ~/.sdkman/bin/sdkman-init.sh && groovy 01-hello-world.groovy'
```

Output:
```
Hello world!
```

**Step 3: Compile and run (optional)**
```bash
# Compile to bytecode
groovyc 01-hello-world.groovy

# This creates 01_hello_world.class file
ls -lh 01_hello_world.class
# -rw-r--r--  1 user  staff  1.8K Oct 29 15:35 01_hello_world.class

# Run the compiled class
groovy 01-hello-world
```

Output:
```
Hello world!
```

**Step 4: Verify both files exist**
```bash
ls -lh 01-hello-world*

# Output:
# -rw-r--r--  1 user  staff   486B Oct 29 15:20 01-hello-world.groovy
# -rw-r--r--  1 user  staff   1.8K Oct 29 15:35 01_hello_world.class
```

### Key Takeaways from This Example

1. **No compilation required for scripts** - Run `.groovy` files directly
2. **Optional compilation** - Can compile to `.class` for distribution
3. **Less boilerplate** - Much simpler than Java
4. **Fast development** - Write and run immediately

### Groovy vs Java Hello World

**Java Hello World (verbose):**
```java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}
```

**Groovy Hello World (concise):**
```groovy
println "Hello world!"
```

**Differences:**
- No class definition needed in Groovy
- No main method required
- No semicolons needed
- Simpler print statement (`println` vs `System.out.println`)
- ~95% less code for same functionality

### Additional Examples

**With String Interpolation:**
```groovy
def language = "Groovy"
println "Hello from ${language}!"
```

**With Multiple Lines:**
```groovy
println """
Hello world!
Welcome to Groovy programming!
"""
```

**Java-style (also works):**
```groovy
System.out.println("Hello world!");
```

### Running in Different Modes

```bash
# 1. Script mode (recommended for simple scripts)
groovy 01-hello-world.groovy

# 2. Compile first, then run
groovyc 01-hello-world.groovy
groovy 01-hello-world

# 3. Make executable (Unix/Linux/macOS)
echo '#!/usr/bin/env groovy' | cat - 01-hello-world.groovy > temp && mv temp 01-hello-world.groovy
chmod +x 01-hello-world.groovy
./01-hello-world.groovy

# 4. Interactive shell (REPL)
groovysh
# Then type: println "Hello world!"
```

## Project Structure

### Simple Groovy Scripts
```
project/
├── scripts/
│   ├── hello.groovy
│   └── utils.groovy
└── README.md
```

### Gradle-based Groovy Project
```
project/
├── src/
│   ├── main/
│   │   ├── groovy/
│   │   │   └── com/
│   │   │       └── example/
│   │   │           └── Main.groovy
│   │   └── resources/
│   └── test/
│       ├── groovy/
│       │   └── com/
│       │       └── example/
│       │           └── MainTest.groovy
│       └── resources/
├── build.gradle
├── settings.gradle
└── gradle/
    └── wrapper/
```

### Sample build.gradle
```groovy
plugins {
    id 'groovy'
    id 'application'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.codehaus.groovy:groovy-all:3.0.19'
    testImplementation 'org.spockframework:spock-core:2.3-groovy-3.0'
}

application {
    mainClass = 'com.example.Main'
}

test {
    useJUnitPlatform()
}
```

## Where is the Documentation

### Official Documentation
1. **Apache Groovy Official Site** - https://groovy-lang.org/
   - Main documentation hub
   - Language specification

2. **Groovy Documentation** - https://groovy-lang.org/documentation.html
   - Complete language reference
   - User guides and tutorials

3. **Groovy API Documentation** - https://docs.groovy-lang.org/latest/html/api/
   - GDK (Groovy Development Kit) API
   - Standard library reference

4. **Groovy Language Specification** - https://groovy-lang.org/spec.html
   - Detailed language syntax
   - Semantics and features

### Learning Resources
1. **Groovy in Action** (Book)
   - Comprehensive guide to Groovy
   - By Dierk König et al.

2. **Programming Groovy 2** (Book)
   - Practical Groovy programming
   - By Venkat Subramaniam

3. **Groovy Tutorial** - https://www.tutorialspoint.com/groovy/
   - Free online tutorials
   - Step-by-step examples

4. **Baeldung Groovy** - https://www.baeldung.com/groovy-language
   - Modern tutorials and guides
   - Real-world examples

5. **Mr. Haki's Blog** - https://blog.mrhaki.com/
   - Groovy Goodness series
   - Tips and tricks

### Framework-Specific Documentation
1. **Grails** (Web Framework) - https://grails.org/
   - Full-stack web application framework
   - Built on Groovy

2. **Spock** (Testing Framework) - https://spockframework.org/
   - BDD-style testing
   - Data-driven tests

3. **Gradle** (Build Tool) - https://gradle.org/
   - Groovy-based build automation
   - Comprehensive documentation

4. **Griffon** (Desktop Framework) - http://griffon-framework.org/
   - Desktop application framework
   - JavaFX and Swing support

### Community and Support
1. **Stack Overflow** - Tag: `groovy`
   - Q&A for specific problems
   - Active community

2. **Groovy Users Mailing List** - https://groovy-lang.org/mailing-lists.html
   - Official mailing lists
   - Community discussions

3. **GitHub** - https://github.com/apache/groovy
   - Source code
   - Issue tracking

4. **Slack/Discord Communities**
   - Groovy community channels
   - Real-time help

## Key Groovy Features

### 1. Optional Typing
```groovy
// Dynamic typing
def name = "Groovy"

// Static typing
String greeting = "Hello"
```

### 2. Closures
```groovy
def multiply = { x, y -> x * y }
println multiply(5, 3)  // 15
```

### 3. String Interpolation
```groovy
def name = "World"
println "Hello, ${name}!"  // GString
```

### 4. Collections
```groovy
// Lists
def list = [1, 2, 3, 4, 5]

// Maps
def map = [name: "John", age: 30]

// Ranges
def range = 1..10
```

### 5. Operator Overloading
```groovy
list << 6  // Append to list
list += [7, 8]  // Add multiple elements
```

### 6. Meta-programming
```groovy
// Add method at runtime
String.metaClass.shout = { -> delegate.toUpperCase() + "!" }
println "hello".shout()  // HELLO!
```

### 7. AST Transformations
```groovy
@groovy.transform.ToString
@groovy.transform.EqualsAndHashCode
class Person {
    String name
    int age
}
```

## Best Practices

1. **Use def for local variables**: Let Groovy infer types
2. **Leverage closures**: Functional programming style
3. **Use GString for string interpolation**: More readable
4. **Prefer collection methods**: `each`, `collect`, `findAll`
5. **Use safe navigation operator**: `?.` to avoid null checks
6. **Elvis operator for defaults**: `value ?: defaultValue`
7. **AST transformations**: Reduce boilerplate code
8. **Follow Java conventions**: When in doubt, Java style works
9. **Use Spock for testing**: More expressive than JUnit
10. **Keep scripts simple**: Use classes for complex logic

## Common Patterns

### Safe Navigation
```groovy
def length = name?.length()  // No NullPointerException
```

### Elvis Operator
```groovy
def displayName = userName ?: "Guest"
```

### With Method
```groovy
person.with {
    firstName = "John"
    lastName = "Doe"
    age = 30
}
```

### Spread Operator
```groovy
def sum = [1, 2, 3]*.multiply(2).sum()  // [2, 4, 6] -> 12
```

## Integration with Java

### Call Java from Groovy
```groovy
// Use any Java class directly
import java.util.ArrayList

def list = new ArrayList()
list.add("Groovy rocks!")
```

### Call Groovy from Java
```java
// Compile Groovy to .class and use like Java
GroovyClass obj = new GroovyClass();
obj.someMethod();

// Or use GroovyShell for dynamic execution
GroovyShell shell = new GroovyShell();
Object result = shell.evaluate("3 + 5");
```

## Troubleshooting

### Common Issues

1. **"groovy: command not found"**
   - **Problem**: Groovy is not installed or not in PATH
   - **Solution**: 
     ```bash
     # Check if Groovy is installed
     which groovy
     
     # If using SDKMAN, source the init script
     source "$HOME/.sdkman/bin/sdkman-init.sh"
     groovy -version
     
     # If not installed, install via SDKMAN
     sdk install groovy
     ```

2. **"JAVA_HOME is not defined correctly" or "Unable to locate a Java Runtime"**
   - **Problem**: Java is not installed or JAVA_HOME not set
   - **Solution with SDKMAN**:
     ```bash
     # Install Java via SDKMAN (easiest method)
     source "$HOME/.sdkman/bin/sdkman-init.sh"
     sdk install java 17.0.9-tem
     
     # Verify
     java -version
     ```
   - **Manual Solution**:
     ```bash
     # Set JAVA_HOME manually (add to ~/.zshrc or ~/.bashrc)
     export JAVA_HOME=$(/usr/libexec/java_home)  # macOS
     export JAVA_HOME=/usr/lib/jvm/java-17-openjdk  # Linux
     export PATH="$JAVA_HOME/bin:$PATH"
     ```

3. **Homebrew installation fails with 403 or dependency errors**
   - **Problem**: Homebrew may have download issues or dependency conflicts
   - **Solution**: Use SDKMAN instead (more reliable)
     ```bash
     # Uninstall failed Homebrew attempt (if any)
     brew uninstall groovy
     
     # Use SDKMAN method
     curl -s "https://get.sdkman.io" | bash
     source "$HOME/.sdkman/bin/sdkman-init.sh"
     sdk install java 17.0.9-tem
     sdk install groovy
     ```

4. **"command not found" after installation**
   - **Problem**: Shell hasn't loaded SDKMAN
   - **Solution**:
     ```bash
     # Option 1: Source in current session
     source "$HOME/.sdkman/bin/sdkman-init.sh"
     
     # Option 2: Add to shell profile permanently
     echo 'source "$HOME/.sdkman/bin/sdkman-init.sh"' >> ~/.zshrc  # for zsh
     echo 'source "$HOME/.sdkman/bin/sdkman-init.sh"' >> ~/.bashrc # for bash
     
     # Then restart terminal or source the profile
     source ~/.zshrc
     ```

5. **Running Groovy with bash command wrapper**
   - **Problem**: Need to run Groovy in a subshell with SDKMAN sourced
   - **Temporary Solution**:
     ```bash
     bash -c 'source ~/.sdkman/bin/sdkman-init.sh && groovy script.groovy'
     ```
   - **Permanent Solution**: Add SDKMAN to your shell profile (see issue #4)

6. **GROOVY_HOME not set**
   - **Problem**: Some tools require GROOVY_HOME environment variable
   - **Solution with SDKMAN**:
     ```bash
     # SDKMAN sets this automatically, but you can verify:
     echo $GROOVY_HOME
     
     # Or set manually
     export GROOVY_HOME="$HOME/.sdkman/candidates/groovy/current"
     ```

7. **Java version mismatch**
   - **Problem**: Wrong Java version
   - **Solution**: Ensure Java 8 or higher is installed
     ```bash
     java -version
     
     # If wrong version, install correct one via SDKMAN
     sdk list java              # See available versions
     sdk install java 17.0.9-tem
     sdk use java 17.0.9-tem    # Use for current session
     sdk default java 17.0.9-tem # Set as default
     ```

8. **ClassNotFoundException**
   - **Problem**: Missing dependencies
   - **Solution**: Check classpath, add required JARs with `-cp` flag
     ```bash
     groovy -cp lib/* script.groovy
     ```

9. **VSCode not recognizing Groovy**
   - **Problem**: Missing extensions or Java support
   - **Solution**: 
     - Install "Extension Pack for Java" first
     - Then install "Code Groovy" extension
     - Reload VSCode window

10. **Gradle wrapper not executable**
    - **Problem**: File permissions on Unix systems
    - **Solution**: 
      ```bash
      chmod +x gradlew
      ./gradlew --version
      ```

### Practical Installation Verification

After installation, verify everything works:

```bash
# 1. Check installations
java -version
groovy -version
sdk version

# 2. Create test script
echo 'println "Hello, Groovy!"' > test.groovy

# 3. Run test script
groovy test.groovy

# 4. Expected output
# Hello, Groovy!

# 5. Clean up
rm test.groovy
```

### Getting Help

If issues persist:

```bash
# Check SDKMAN status
sdk version
sdk current

# List installed versions
sdk list java
sdk list groovy

# Reinstall if needed
sdk uninstall groovy
sdk install groovy

# Check Java path
which java
echo $JAVA_HOME

# Check Groovy path
which groovy
echo $GROOVY_HOME
```

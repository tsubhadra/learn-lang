# JavaScript Initial Setup Guide

## What is JavaScript?

JavaScript is a high-level, interpreted programming language that conforms to the ECMAScript specification. It's a multi-paradigm language supporting event-driven, functional, and imperative programming styles. Originally created for web browsers, JavaScript now runs everywhere - servers (Node.js), mobile apps, desktop applications, and IoT devices.

## Extensions in VSCode

VSCode has excellent built-in JavaScript support, but these extensions enhance the experience:

### Essential Extensions

1. **ESLint**
   - JavaScript linting and code quality
   - Extension ID: dbaeumer.vscode-eslint

2. **Prettier - Code formatter**
   - Automatic code formatting
   - Extension ID: esbenp.prettier-vscode

3. **JavaScript (ES6) code snippets**
   - ES6+ syntax snippets
   - Extension ID: xabikos.JavaScriptSnippets

### Highly Recommended

4. **Path Intellisense**
   - Autocomplete file paths
   - Extension ID: christian-kohler.path-intellisense

5. **npm Intellisense**
   - Autocomplete npm modules in import statements
   - Extension ID: christian-kohler.npm-intellisense

6. **Import Cost**
   - Display size of imported packages
   - Extension ID: wix.vscode-import-cost

7. **Quokka.js**
   - Live JavaScript playground
   - Extension ID: WallabyJs.quokka-vscode

8. **Code Runner**
   - Run JavaScript quickly
   - Extension ID: formulahendry.code-runner

### Framework-Specific

9. **React Extension Pack** (for React development)
   - Extension ID: jawandarajbir.react-vscode-extension-pack

10. **Vue - Official** (for Vue.js)
    - Extension ID: Vue.volar

11. **Angular Language Service** (for Angular)
    - Extension ID: Angular.ng-template

12. **Svelte for VS Code** (for Svelte)
    - Extension ID: svelte.svelte-vscode

### Testing and Debugging

13. **Jest**
    - Jest test runner integration
    - Extension ID: Orta.vscode-jest

14. **Debugger for Chrome/Edge**
    - Debug JavaScript in browsers
    - Extension ID: msjsdiag.debugger-for-chrome

## Installation

### Install Node.js and npm

Node.js includes npm (Node Package Manager) by default.

#### macOS

**Option 1: Using Homebrew (Recommended)**
```bash
# Install Node.js (includes npm)
brew install node

# Or install specific version
brew install node@20
brew install node@18

# Verify installation
node -v
npm -v
```

**Option 2: Using nvm (Node Version Manager)**
```bash
# Install nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash

# Restart terminal or source profile
source ~/.zshrc  # or ~/.bashrc

# Install Node.js
nvm install node        # Latest version
nvm install --lts       # Latest LTS version
nvm install 20.10.0     # Specific version

# Use a version
nvm use node
nvm use 20

# Set default version
nvm alias default 20

# List installed versions
nvm ls

# Verify
node -v
npm -v
```

#### Linux

**Using nvm (Recommended)**
```bash
# Install nvm
curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.5/install.sh | bash
source ~/.bashrc

# Install Node.js
nvm install --lts

# Verify
node -v
npm -v
```

**Using APT (Debian/Ubuntu)**
```bash
# Update package index
sudo apt update

# Install Node.js and npm
sudo apt install nodejs npm

# Or install specific version via NodeSource
curl -fsSL https://deb.nodesource.com/setup_20.x | sudo -E bash -
sudo apt-get install -y nodejs

# Verify
node -v
npm -v
```

#### Windows

**Option 1: Using Chocolatey**
```powershell
# Install Node.js
choco install nodejs

# Or install LTS version
choco install nodejs-lts

# Verify
node -v
npm -v
```

**Option 2: Manual Installation**
1. Download installer from https://nodejs.org/
2. Run the installer (choose LTS version recommended)
3. Verify in Command Prompt: `node -v` and `npm -v`

**Option 3: Using nvm-windows**
1. Download from https://github.com/coreybutler/nvm-windows/releases
2. Install nvm-windows
3. Open PowerShell/CMD as Administrator:
```powershell
nvm install lts
nvm use lts
```

### Alternative Package Managers

#### Yarn (Fast, reliable alternative to npm)
```bash
# Install Yarn globally
npm install -g yarn

# Or via Homebrew (macOS)
brew install yarn

# Verify
yarn -v
```

#### pnpm (Fast, disk space efficient)
```bash
# Install pnpm globally
npm install -g pnpm

# Or via standalone script
curl -fsSL https://get.pnpm.io/install.sh | sh -

# Verify
pnpm -v
```

## How to Run JavaScript

### Method 1: In the Browser

**Create an HTML file:**
```html
<!DOCTYPE html>
<html>
<head>
    <title>JavaScript Demo</title>
</head>
<body>
    <h1>Open Console (F12) to see output</h1>
    
    <!-- Inline JavaScript -->
    <script>
        console.log('Hello from inline script!');
    </script>
    
    <!-- External JavaScript file -->
    <script src="script.js"></script>
</body>
</html>
```

**Open in browser:**
- Double-click HTML file
- Or use Live Server extension in VSCode
- Press F12 to open Developer Console

### Method 2: Using Node.js (Server-side)

```bash
# Run a JavaScript file
node filename.js

# Example
node hello-world.js

# Interactive REPL (Read-Eval-Print Loop)
node
> console.log('Hello!')
> .exit  # to exit
```

### Method 3: Using npm Scripts

**package.json:**
```json
{
  "name": "my-project",
  "version": "1.0.0",
  "scripts": {
    "start": "node index.js",
    "dev": "nodemon index.js",
    "test": "jest"
  }
}
```

**Run scripts:**
```bash
npm run start
npm run dev
npm test  # or npm t
```

### Method 4: Using VSCode

**Method 4a: Code Runner Extension**
- Right-click in editor → "Run Code"
- Or press `Ctrl+Alt+N` (Windows/Linux) or `Cmd+Option+N` (macOS)

**Method 4b: Built-in Debugger**
1. Add breakpoints (click left of line number)
2. Press F5 or Run → Start Debugging
3. Select "Node.js" as environment

**Method 4c: VSCode Terminal**
```bash
# Open terminal (Ctrl+` or Cmd+`)
node filename.js
```

### Method 5: Using Browser Developer Tools

1. Open browser (Chrome, Firefox, Edge)
2. Press F12 or right-click → Inspect
3. Go to Console tab
4. Write JavaScript directly
```javascript
console.log('Hello!');
let x = 5 + 3;
console.log(x);
```

## Project Setup

### Initialize a New Project

```bash
# Create project directory
mkdir my-project
cd my-project

# Initialize with npm
npm init

# Or skip questions (use defaults)
npm init -y

# Or with yarn
yarn init

# Or with pnpm
pnpm init
```

### Installing Packages

```bash
# Install package as dependency
npm install package-name
npm install express lodash axios

# Install as dev dependency
npm install --save-dev jest eslint prettier

# Install globally
npm install -g nodemon http-server

# Install specific version
npm install package-name@1.2.3

# Install from GitHub
npm install user/repo

# Update packages
npm update

# Remove package
npm uninstall package-name
```

**Yarn equivalents:**
```bash
yarn add package-name
yarn add --dev jest
yarn global add nodemon
yarn remove package-name
```

**pnpm equivalents:**
```bash
pnpm add package-name
pnpm add -D jest
pnpm add -g nodemon
pnpm remove package-name
```

## Project Structure

### Simple Node.js Project
```
my-project/
├── node_modules/
├── src/
│   ├── index.js
│   ├── utils/
│   │   └── helper.js
│   └── config/
│       └── config.js
├── tests/
│   └── index.test.js
├── .gitignore
├── package.json
├── package-lock.json
└── README.md
```

### Frontend Project (Vanilla JS)
```
my-project/
├── index.html
├── css/
│   └── style.css
├── js/
│   ├── main.js
│   ├── components/
│   └── utils/
├── assets/
│   └── images/
└── package.json
```

### React/Vue/Angular Project
```
my-app/
├── node_modules/
├── public/
│   └── index.html
├── src/
│   ├── index.js
│   ├── App.js
│   ├── components/
│   ├── pages/
│   ├── services/
│   ├── utils/
│   └── styles/
├── tests/
├── .gitignore
├── package.json
└── README.md
```

### Sample package.json
```json
{
  "name": "my-project",
  "version": "1.0.0",
  "description": "A sample Node.js project",
  "main": "index.js",
  "scripts": {
    "start": "node src/index.js",
    "dev": "nodemon src/index.js",
    "test": "jest",
    "test:watch": "jest --watch",
    "lint": "eslint src/**/*.js",
    "format": "prettier --write src/**/*.js"
  },
  "keywords": ["node", "javascript"],
  "author": "Your Name",
  "license": "MIT",
  "dependencies": {
    "express": "^4.18.2",
    "dotenv": "^16.3.1"
  },
  "devDependencies": {
    "nodemon": "^3.0.1",
    "jest": "^29.7.0",
    "eslint": "^8.52.0",
    "prettier": "^3.0.3"
  },
  "engines": {
    "node": ">=18.0.0",
    "npm": ">=9.0.0"
  }
}
```

### Sample .gitignore
```
node_modules/
.env
.env.local
dist/
build/
coverage/
*.log
.DS_Store
.vscode/
.idea/
```

## Configuration Files

### ESLint (.eslintrc.json)
```json
{
  "env": {
    "browser": true,
    "es2021": true,
    "node": true
  },
  "extends": "eslint:recommended",
  "parserOptions": {
    "ecmaVersion": "latest",
    "sourceType": "module"
  },
  "rules": {
    "no-console": "warn",
    "semi": ["error", "always"],
    "quotes": ["error", "single"]
  }
}
```

### Prettier (.prettierrc)
```json
{
  "semi": true,
  "singleQuote": true,
  "tabWidth": 2,
  "trailingComma": "es5",
  "printWidth": 80
}
```

### JSConfig (jsconfig.json) for better IntelliSense
```json
{
  "compilerOptions": {
    "target": "ES6",
    "module": "commonjs",
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "exclude": ["node_modules", "dist"]
}
```

## Where is the Documentation

### Official Documentation

1. **MDN Web Docs** - https://developer.mozilla.org/en-US/docs/Web/JavaScript
   - Most comprehensive JavaScript reference
   - Best resource for learning
   - Browser APIs documentation

2. **JavaScript.info** - https://javascript.info/
   - Modern JavaScript tutorial
   - From basics to advanced
   - Interactive examples

3. **ECMAScript Specification** - https://tc39.es/ecma262/
   - Official language specification
   - Latest features and proposals

4. **Node.js Documentation** - https://nodejs.org/docs/
   - Official Node.js docs
   - API reference

5. **npm Documentation** - https://docs.npmjs.com/
   - Package manager guide
   - Publishing packages

### Framework Documentation

1. **React** - https://react.dev/
   - Component-based UI library
   - Most popular framework

2. **Vue.js** - https://vuejs.org/
   - Progressive framework
   - Easy to learn

3. **Angular** - https://angular.io/
   - Full-featured framework
   - TypeScript-based

4. **Next.js** - https://nextjs.org/
   - React framework for production
   - Server-side rendering

5. **Express.js** - https://expressjs.com/
   - Web framework for Node.js
   - Minimal and flexible

6. **NestJS** - https://nestjs.com/
   - Progressive Node.js framework
   - TypeScript-based

### Testing Frameworks

1. **Jest** - https://jestjs.io/
   - Popular testing framework
   - Batteries included

2. **Mocha** - https://mochajs.org/
   - Flexible testing framework
   - Works with many assertion libraries

3. **Cypress** - https://www.cypress.io/
   - End-to-end testing
   - Excellent developer experience

4. **Playwright** - https://playwright.dev/
   - E2E testing across browsers
   - By Microsoft

### Learning Resources

1. **Eloquent JavaScript (Book)** - https://eloquentjavascript.net/
   - Free online book
   - Comprehensive and well-written

2. **You Don't Know JS (Book Series)** - https://github.com/getify/You-Dont-Know-JS
   - Deep dive into JavaScript
   - Free on GitHub

3. **JavaScript30** - https://javascript30.com/
   - 30 day vanilla JS challenge
   - Build 30 things in 30 days

4. **FreeCodeCamp** - https://www.freecodecamp.org/
   - Free coding bootcamp
   - Comprehensive curriculum

5. **The Odin Project** - https://www.theodinproject.com/
   - Free full-stack curriculum
   - Project-based learning

6. **Wes Bos Courses** - https://wesbos.com/courses
   - High-quality video courses
   - Many free options

7. **Frontend Masters** - https://frontendmasters.com/
   - Expert-led courses
   - In-depth learning

### Community and Support

1. **Stack Overflow** - Tag: `javascript`, `node.js`
   - Q&A for specific problems
   - Huge community

2. **Reddit**
   - r/javascript - General JavaScript
   - r/node - Node.js
   - r/reactjs - React
   - r/vuejs - Vue.js

3. **Dev.to** - https://dev.to/t/javascript
   - Developer articles
   - Community discussions

4. **Discord/Slack Communities**
   - Reactiflux (React)
   - Vue Land (Vue.js)
   - Node.js Discord

5. **GitHub Discussions**
   - Framework-specific discussions
   - Feature requests

### YouTube Channels

1. **Traversy Media** - Web development tutorials
2. **The Net Ninja** - JavaScript and frameworks
3. **Fireship** - Quick, concise tutorials
4. **Web Dev Simplified** - Beginner-friendly
5. **freeCodeCamp.org** - Long-form tutorials
6. **Academind** - Comprehensive courses

### Blogs and Newsletters

1. **JavaScript Weekly** - https://javascriptweekly.com/
2. **Node Weekly** - https://nodeweekly.com/
3. **CSS-Tricks** - https://css-tricks.com/
4. **Smashing Magazine** - https://www.smashingmagazine.com/
5. **2ality** - https://2ality.com/ (Dr. Axel Rauschmayer)

## JavaScript Versions (ES Versions)

### Key Versions and Features

- **ES5 (2009)** - Strict mode, JSON, Array methods
- **ES6/ES2015** - Let/const, arrow functions, classes, modules, promises, template literals
- **ES2016** - Array.includes(), exponentiation operator
- **ES2017** - Async/await, Object.entries/values
- **ES2018** - Rest/spread for objects, async iteration
- **ES2019** - Array.flat/flatMap, Object.fromEntries
- **ES2020** - Optional chaining, nullish coalescing, BigInt
- **ES2021** - Logical assignment, numeric separators
- **ES2022** - Top-level await, class fields, at() method
- **ES2023** - Array findLast, toSorted, toReversed

### Modern JavaScript Features (ES6+)

```javascript
// Arrow functions
const add = (a, b) => a + b;

// Template literals
const name = 'World';
console.log(`Hello, ${name}!`);

// Destructuring
const { name, age } = person;
const [first, second] = array;

// Spread operator
const newArray = [...oldArray, 4, 5];
const newObj = { ...oldObj, key: 'value' };

// Default parameters
function greet(name = 'Guest') {
  console.log(`Hello, ${name}!`);
}

// Async/await
async function fetchData() {
  try {
    const response = await fetch(url);
    const data = await response.json();
    return data;
  } catch (error) {
    console.error(error);
  }
}

// Optional chaining
const city = user?.address?.city;

// Nullish coalescing
const value = input ?? 'default';

// Classes
class Person {
  constructor(name) {
    this.name = name;
  }
  
  greet() {
    console.log(`Hello, I'm ${this.name}`);
  }
}

// Modules
// export
export const myFunction = () => {};
export default MyComponent;

// import
import MyComponent from './MyComponent';
import { myFunction } from './utils';
```

## Common npm Commands

```bash
# Initialize project
npm init
npm init -y

# Install dependencies
npm install
npm i

# Install package
npm install package-name
npm i package-name

# Install dev dependency
npm install --save-dev package-name
npm i -D package-name

# Install globally
npm install -g package-name

# Uninstall package
npm uninstall package-name

# Update packages
npm update
npm outdated  # Check for outdated packages

# Run scripts
npm start
npm test
npm run script-name

# List installed packages
npm list
npm list -g  # Global packages
npm list --depth=0  # Top-level only

# View package info
npm info package-name
npm view package-name versions

# Clean cache
npm cache clean --force

# Security audit
npm audit
npm audit fix

# Check for updates
npx npm-check-updates
npx npm-check-updates -u  # Update package.json

# Create .gitignore
npx gitignore node

# Run package without installing
npx package-name
```

## Development Tools

### Essential Global Packages

```bash
# Nodemon - Auto-restart on file changes
npm install -g nodemon

# Http-server - Simple HTTP server
npm install -g http-server

# Live Server - Development server with live reload
npm install -g live-server

# ESLint - Linting
npm install -g eslint

# Prettier - Code formatting
npm install -g prettier

# TypeScript - If using TypeScript
npm install -g typescript

# ts-node - Run TypeScript directly
npm install -g ts-node
```

### Useful Development Commands

```bash
# Run with nodemon (auto-restart)
nodemon app.js

# Start simple HTTP server
http-server
http-server -p 8080  # Specific port

# Live server with auto-reload
live-server

# Check for errors
eslint src/

# Format code
prettier --write "src/**/*.js"

# Run TypeScript
tsc  # Compile
ts-node app.ts  # Run directly
```

## Best Practices

1. **Use const and let, not var**: Block scoping and immutability

2. **Use arrow functions**: Cleaner syntax, lexical this

3. **Use template literals**: Better string concatenation

4. **Destructure objects and arrays**: Cleaner code

5. **Use async/await over callbacks**: Avoid callback hell

6. **Use === not ==**: Strict equality

7. **Handle errors properly**: Try-catch for async, .catch() for promises

8. **Use modern array methods**: map, filter, reduce, find

9. **Avoid global variables**: Use modules

10. **Use meaningful variable names**: Self-documenting code

11. **Keep functions small**: Single responsibility

12. **Use ESLint and Prettier**: Consistent code style

13. **Write tests**: Jest, Mocha, or testing framework

14. **Use environment variables**: .env files for config

15. **Comment complex code**: But prefer readable code over comments

## Common Patterns

### Module Pattern
```javascript
// ES6 Modules
export const add = (a, b) => a + b;
export const subtract = (a, b) => a - b;

import { add, subtract } from './math.js';
```

### Promise Chaining
```javascript
fetch('/api/users')
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error))
  .finally(() => console.log('Done'));
```

### Async/Await
```javascript
async function loadData() {
  try {
    const response = await fetch('/api/data');
    const data = await response.json();
    return data;
  } catch (error) {
    console.error('Error:', error);
  }
}
```

### Closures
```javascript
function counter() {
  let count = 0;
  return {
    increment: () => ++count,
    decrement: () => --count,
    value: () => count
  };
}

const myCounter = counter();
myCounter.increment();  // 1
```

## Troubleshooting

### Common Issues

1. **"node: command not found"**
   ```bash
   # Check installation
   which node
   
   # Reinstall Node.js or add to PATH
   export PATH="/usr/local/bin:$PATH"
   ```

2. **"MODULE_NOT_FOUND"**
   ```bash
   # Install dependencies
   npm install
   
   # Check package.json has the package listed
   # Check import path is correct
   ```

3. **"Permission denied" (when installing globally on macOS/Linux)**
   ```bash
   # Fix npm permissions
   mkdir ~/.npm-global
   npm config set prefix '~/.npm-global'
   export PATH=~/.npm-global/bin:$PATH
   
   # Add to ~/.zshrc or ~/.bashrc
   ```

4. **Port already in use**
   ```bash
   # Find process using port
   lsof -i :3000  # macOS/Linux
   netstat -ano | findstr :3000  # Windows
   
   # Kill process or use different port
   ```

5. **npm install fails**
   ```bash
   # Clear cache
   npm cache clean --force
   
   # Delete node_modules and package-lock.json
   rm -rf node_modules package-lock.json
   npm install
   ```

6. **"Unexpected token" errors**
   - Check Node.js version supports ES6+ features
   - Update Node.js: `nvm install node`
   - Or use transpiler like Babel

7. **VSCode IntelliSense not working**
   - Create jsconfig.json
   - Reload window: Cmd/Ctrl + Shift + P → "Reload Window"
   - Check TypeScript version in VSCode

## Environment Variables

### Using dotenv

**Install:**
```bash
npm install dotenv
```

**Create .env file:**
```
PORT=3000
DATABASE_URL=mongodb://localhost:27017/mydb
API_KEY=your-secret-key
NODE_ENV=development
```

**Use in code:**
```javascript
require('dotenv').config();

const port = process.env.PORT || 3000;
const dbUrl = process.env.DATABASE_URL;
```

**Important:**
- Add .env to .gitignore
- Never commit secrets to git
- Create .env.example with dummy values

## Quick Start Examples

### Basic Hello World (Node.js)

**Step 1: Create the JavaScript file**

```javascript
// 01-hello-world.js
// Simple JavaScript program to print "Hello world!"

console.log("Hello world!");

// Alternative methods:
// const message = "world";
// console.log(`Hello ${message}!`);  // Template literals
// console.log("Hello" + " " + "world!");  // Concatenation
```

**Step 2: Run the program**

```bash
# Run with Node.js
node 01-hello-world.js
```

**Expected Output:**
```
Hello world!
```

**Key Points:**
- ❌ No compilation needed
- ❌ No class or main() function required
- ✅ Code runs from top to bottom
- ✅ Semicolons optional (but recommended)

### Hello World in Browser

**Create an HTML file:**

```html
<!-- 01-hello-world.html -->
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>JavaScript Hello World</title>
</head>
<body>
    <h1>JavaScript Hello World</h1>
    <div id="output"></div>
    
    <script>
        // Method 1: Console output (F12 to see)
        console.log("Hello world!");
        
        // Method 2: Display on page
        document.getElementById('output').textContent = "Hello world!";
        
        // Method 3: Alert box (uncomment to test)
        // alert("Hello world!");
    </script>
</body>
</html>
```

**How to run:**
1. Save as `01-hello-world.html`
2. Double-click to open in browser
3. See "Hello world!" on the page
4. Press F12 → Console tab to see console.log() output

### Hello World (Simple - for quick testing)
```javascript
// hello.js
console.log('Hello, World!');
```

```bash
node hello.js
```

### Simple HTTP Server
```javascript
// server.js
const http = require('http');

const server = http.createServer((req, res) => {
  res.writeHead(200, { 'Content-Type': 'text/plain' });
  res.end('Hello, World!\n');
});

server.listen(3000, () => {
  console.log('Server running at http://localhost:3000/');
});
```

```bash
node server.js
```

### Express Server
```javascript
// app.js
const express = require('express');
const app = express();
const port = 3000;

app.get('/', (req, res) => {
  res.send('Hello, World!');
});

app.listen(port, () => {
  console.log(`Server listening at http://localhost:${port}`);
});
```

```bash
npm install express
node app.js
```

### Practical Hello World - Complete Example

Based on actual execution:

**Files created in lessons directory:**
```bash
$ ls -lh lessons/
-rw-r--r--  2.2K  01-hello-world.js      # Node.js version
-rw-r--r--  2.5K  01-hello-world.html    # Browser version
```

**Running 01-hello-world.js:**
```bash
$ node 01-hello-world.js
Hello world!
```

**Key Differences from Compiled Languages:**

**Java (requires compilation):**
```java
public class HelloWorld {
    public static void main(String[] args) {
        System.out.println("Hello world!");
    }
}
```
```bash
javac HelloWorld.java  # Compile step
java HelloWorld        # Run
```

**JavaScript (interpreted, no compilation):**
```javascript
console.log("Hello world!");
```
```bash
node hello.js  # Run directly, no compilation
```

**Advantages:**
- ✅ No compilation step - faster development
- ✅ Simpler syntax - less boilerplate
- ✅ Runs in browsers without any setup
- ✅ Dynamic typing - more flexible
- ✅ Same code works in multiple environments (browser, Node.js)

**When to Use JavaScript:**
- Frontend web development
- Backend APIs (Node.js)
- Full-stack applications
- Real-time applications
- Mobile apps (React Native)
- Desktop apps (Electron)

### JavaScript vs Other Languages

| Feature | JavaScript | Java | Python | C++ |
|---------|-----------|------|--------|-----|
| Compilation | ❌ No | ✅ Yes | ❌ No | ✅ Yes |
| Typing | Dynamic | Static | Dynamic | Static |
| Main Function | ❌ No | ✅ Yes | ❌ No | ✅ Yes |
| Browser Support | ✅ Native | ❌ Applet (deprecated) | ❌ No | ❌ No |
| Learning Curve | Easy | Medium | Easy | Hard |
| Use Case | Web/Full-stack | Enterprise | Data/Script | Systems |

